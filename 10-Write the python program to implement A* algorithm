import heapq
def a_star(graph, start, goal, h):
    open_set = []
    heapq.heappush(open_set, (0, start))
    came_from = {}
    g_score = {node: float('inf') for node in graph}
    g_score[start] = 0
    f_score = {node: float('inf') for node in graph}
    f_score[start] = h[start]
    while open_set:
        current = heapq.heappop(open_set)[1]
        if current == goal:
            return reconstruct_path(came_from, current)
        for neighbor, cost in graph[current].items():
            tentative_g_score = g_score[current] + cost
            if tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + h[neighbor]
                if neighbor not in [i[1] for i in open_set]:
                    heapq.heappush(open_set, (f_score[neighbor], neighbor))
    return None
def reconstruct_path(came_from, current):
    total_path = [current]
    while current in came_from:
        current = came_from[current]
        total_path.append(current)
    total_path.reverse()
    return total_path
if __name__ == "__main__":
    graph = {
        'A': {'B': 1, 'C': 3},
        'B': {'A': 1, 'D': 1, 'E': 5},
        'C': {'A': 3, 'F': 2},
        'D': {'B': 1},
        'E': {'B': 5, 'F': 2},
        'F': {'C': 2, 'E': 2}
    }
    h = {
        'A': 6,
        'B': 5,
        'C': 3,
        'D': 3,
        'E': 1,
        'F': 0
    }
    start = 'A'
    goal = 'F'
    path = a_star(graph, start, goal, h)
    if path:
        print(f"The shortest path from {start} to {goal} is: {' -> '.join(path)}")
    else:
        print(f"No path found from {start} to {goal}")
